require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');

// Bot token
const token = process.env.TELEGRAM_BOT_TOKEN || '7861575530:AAFenotTwpAqjLoEFalw3vDBkDrZq8Vse8A';

// Botun Ã§alÄ±ÅŸma modunu belirle - polling moduna geÃ§iyoruz
const isDevelopment = process.env.NODE_ENV !== 'production';
const usePolling = true; // Polling'i aktif et

let bot;

// GÃ¼venli bot baÅŸlatma
try {
  if (usePolling) {
    console.log('Bot polling modunda baÅŸlatÄ±lÄ±yor...');
    bot = new TelegramBot(token, { polling: true });
    console.log('Bot polling modunda baÅŸarÄ±yla baÅŸlatÄ±ldÄ±');
    
    // Polling hatalarÄ±nÄ± yakala
    bot.on('polling_error', (error) => {
      console.error('Polling hatasÄ±:', error);
    });
  } else {
    console.log('Bot webhook modunda baÅŸlatÄ±lÄ±yor...');
    bot = new TelegramBot(token, { polling: false });
    console.log('Bot webhook modunda baÅŸarÄ±yla baÅŸlatÄ±ldÄ±');
  }
} catch (error) {
  console.error('Bot Ã¶rneÄŸi oluÅŸturulurken hata:', error);
  // Fallback bot oluÅŸtur
  bot = new TelegramBot(token, { polling: true });
}

// Mock veri - Airdroplar ve borsalar
const airdropData = [
  { name: 'KSHA Token', description: 'Yeni kripto para airdrop fÄ±rsatÄ±', link: 'https://example.com/ksha-airdrop' },
  { name: 'BLUM Token', description: 'Blum ekosistem token airdrop', link: 'https://example.com/blum-airdrop' },
  { name: 'NFT Airdrop', description: 'Ã–zel koleksiyon NFT airdrop', link: 'https://example.com/nft-airdrop' }
];

const exchangeData = [
  { name: 'Binance', description: 'En bÃ¼yÃ¼k kripto para borsasÄ±', link: 'https://binance.com' },
  { name: 'KuCoin', description: 'PopÃ¼ler altcoin borsasÄ±', link: 'https://kucoin.com' },
  { name: 'Gate.io', description: 'Yeni projeler iÃ§in borsa', link: 'https://gate.io' }
];

// KarÅŸÄ±lama mesajÄ±
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  
  bot.sendMessage(chatId, `ðŸŽ‰ Kusha Kripto Bot'a HoÅŸgeldin !

âšª Botun Ã–zellikleri

ðŸŸ¡ Bot ile gÃ¼ncel kripto para Airdrop (Halka Arz) takip edebilirsin. Bu sayede gelir elde edebilirsin.
ðŸŸ¡ Ä°ndirimli komisyon avantajÄ± ve Ã¶dÃ¼llerle kripto para borsalarÄ±na kayÄ±t olabilirsin.

KolaylÄ±klar âœ¨`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'ðŸŸ¡ AirDrop (Kripto Halka Arz)', callback_data: 'airdrop' }],
        [{ text: 'ðŸŸ¡ Partner Borsalar KayÄ±t Linkleri', callback_data: 'partner_borsalar' }],
        [{ text: 'ðŸ”µ Kusha Airdrop KazanÃ§ KanalÄ±', url: 'https://t.me/kushaairdropkanal' }],
        [{ text: 'ðŸ”µ Kusha Airdrop Twitter', url: 'https://twitter.com/kushaairdrop' }],
        [{ text: 'ðŸŸ¢ BlumAutoClicker', callback_data: 'blum_auto_clicker' }],
        [{ text: 'âšª KushaAutoClicker', callback_data: 'kusha_auto_clicker' }],
        [{ text: 'âš« KOD AL', callback_data: 'kod_al' }]
      ]
    }
  });
});

// AirDrop menÃ¼sÃ¼
bot.onText(/ðŸŸ¡ AirDrop \(Kripto Halka Arz\)/, (msg) => {
  const chatId = msg.chat.id;
  
  let message = 'ðŸš€ *GÃ¼ncel Airdrop FÄ±rsatlarÄ±*\n\n';
  
  airdropData.forEach((airdrop, index) => {
    message += `*${index + 1}. ${airdrop.name}*\n`;
    message += `AÃ§Ä±klama: ${airdrop.description}\n`;
    message += `Link: ${airdrop.link}\n\n`;
  });
  
  bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
});

// Partner Borsalar menÃ¼sÃ¼
bot.onText(/ðŸŸ¡ Partner Borsalar KayÄ±t Linkleri/, (msg) => {
  const chatId = msg.chat.id;
  
  let message = 'ðŸ’¹ *Partner Kripto Para BorsalarÄ±*\n\n';
  
  exchangeData.forEach((exchange, index) => {
    message += `*${index + 1}. ${exchange.name}*\n`;
    message += `AÃ§Ä±klama: ${exchange.description}\n`;
    message += `KayÄ±t Link: ${exchange.link}\n\n`;
  });
  
  bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
});

// Kusha Airdrop KazanÃ§ KanalÄ±
bot.onText(/ðŸ”µ Kusha Airdrop KazanÃ§ KanalÄ±/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 'Airdrop kazanÃ§ kanalÄ±mÄ±za katÄ±lÄ±n: https://t.me/kushaairdropkanal');
});

// Kusha Airdrop Twitter
bot.onText(/ðŸ”µ Kusha Airdrop Twitter/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 'Twitter hesabÄ±mÄ±zÄ± takip edin: https://twitter.com/kushaairdrop');
});

// BlumAutoClicker
bot.onText(/ðŸŸ¢ BlumAutoClicker/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 'BlumAutoClicker uygulamasÄ± hakkÄ±nda bilgi: Kripto airdrop etkinliklerinde otomatik tÄ±klama iÃ§in tasarlanmÄ±ÅŸ yardÄ±mcÄ± araÃ§.');
});

// KushaAutoClicker
bot.onText(/âšª KushaAutoClicker/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 'KushaAutoClicker uygulamasÄ± hakkÄ±nda bilgi: Airdrop ve bounty gÃ¶revleri iÃ§in Ã¶zel olarak tasarlanmÄ±ÅŸ tÄ±klama aracÄ±.');
});

// KOD AL
bot.onText(/âš« KOD AL/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 'Referans kodunuz: KUSHA2024\nBu kodu borsalara kayÄ±t olurken kullanabilirsiniz.');
});

// Callback sorgularÄ± iÃ§in iÅŸleyici ekleme
bot.on('callback_query', (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  
  switch (data) {
    case 'airdrop':
      let airdropMessage = 'ðŸš€ *GÃ¼ncel Airdrop FÄ±rsatlarÄ±*\n\n';
  
      airdropData.forEach((airdrop, index) => {
        airdropMessage += `*${index + 1}. ${airdrop.name}*\n`;
        airdropMessage += `AÃ§Ä±klama: ${airdrop.description}\n`;
        airdropMessage += `Link: ${airdrop.link}\n\n`;
      });
  
      bot.sendMessage(chatId, airdropMessage, { parse_mode: 'Markdown' });
      break;
      
    case 'partner_borsalar':
      let exchangeMessage = 'ðŸ’¹ *Partner Kripto Para BorsalarÄ±*\n\n';
  
      exchangeData.forEach((exchange, index) => {
        exchangeMessage += `*${index + 1}. ${exchange.name}*\n`;
        exchangeMessage += `AÃ§Ä±klama: ${exchange.description}\n`;
        exchangeMessage += `KayÄ±t Link: ${exchange.link}\n\n`;
      });
  
      bot.sendMessage(chatId, exchangeMessage, { parse_mode: 'Markdown' });
      break;
      
    case 'blum_auto_clicker':
      bot.sendMessage(chatId, 'BlumAutoClicker uygulamasÄ± hakkÄ±nda bilgi: Kripto airdrop etkinliklerinde otomatik tÄ±klama iÃ§in tasarlanmÄ±ÅŸ yardÄ±mcÄ± araÃ§.');
      break;
      
    case 'kusha_auto_clicker':
      bot.sendMessage(chatId, 'KushaAutoClicker uygulamasÄ± hakkÄ±nda bilgi: Airdrop ve bounty gÃ¶revleri iÃ§in Ã¶zel olarak tasarlanmÄ±ÅŸ tÄ±klama aracÄ±.');
      break;
      
    case 'kod_al':
      bot.sendMessage(chatId, 'Referans kodunuz: KUSHA2024\nBu kodu borsalara kayÄ±t olurken kullanabilirsiniz.');
      break;
  }
  
  // Bildirim kapatma
  bot.answerCallbackQuery(callbackQuery.id);
});

// Webhook'u ayarlama fonksiyonu
const setupWebhook = (app, force = false) => {
  if (!usePolling || force) {
    try {
      // Vercel URL'yi doÄŸrudan belirt
      const vercelUrl = process.env.VERCEL_URL || 'telegram-bot-backend-coral.vercel.app';
      
      const url = `https://${vercelUrl}`;
      const webhookPath = `/api/webhook/${token}`;
      const fullWebhookUrl = `${url}${webhookPath}`;
      
      console.log(`Webhook URL'si ayarlanÄ±yor: ${fullWebhookUrl}`);
      
      // Webhook'u temizle ve yeniden ayarla
      bot.deleteWebHook()
        .then(() => {
          console.log('Eski webhook temizlendi');
          return bot.setWebHook(fullWebhookUrl);
        })
        .then(() => {
          console.log(`Webhook baÅŸarÄ±yla ayarlandÄ±: ${fullWebhookUrl}`);
        })
        .catch(error => {
          console.error('Webhook ayarlanÄ±rken hata oluÅŸtu:', error);
        });
      
      // Gelen webhook isteklerini iÅŸle
      app.post(webhookPath, (req, res) => {
        console.log('Webhook isteÄŸi alÄ±ndÄ±');
        
        try {
          // Telegram API'den gelen update verisinin yapÄ±sÄ±nÄ± kontrol et
          const update = req.body;
          
          if (!update) {
            console.error('BoÅŸ update alÄ±ndÄ±');
            return res.sendStatus(200);
          }
          
          console.log('Update verisi alÄ±ndÄ±');
          
          // MesajÄ± doÄŸrudan iÅŸle
          bot.processUpdate(update);
          
          console.log('Webhook isteÄŸi baÅŸarÄ±yla iÅŸlendi');
          return res.sendStatus(200);
        } catch (error) {
          console.error('Webhook isteÄŸi iÅŸlenirken hata oluÅŸtu:', error);
          return res.sendStatus(200);
        }
      });
      
      // Webhook durumunu kontrol etmek iÃ§in endpoint
      app.get('/api/bot/webhook-status', (req, res) => {
        bot.getWebHookInfo()
          .then(info => {
            res.json({
              status: 'success',
              webhook: info,
              botUrl: fullWebhookUrl
            });
          })
          .catch(error => {
            res.status(500).json({
              status: 'error',
              error: error.message
            });
          });
      });
      
      // Botun durumunu kontrol etmek iÃ§in bir endpoint
      app.get('/api/bot/status', (req, res) => {
        bot.getMe()
          .then(botInfo => {
            res.json({
              status: 'online',
              bot: {
                id: botInfo.id,
                name: botInfo.first_name,
                username: botInfo.username
              },
              mode: 'webhook',
              webhookUrl: fullWebhookUrl
            });
          })
          .catch(error => {
            res.status(500).json({
              status: 'error',
              error: error.message
            });
          });
      });
    } catch (error) {
      console.error('Webhook ayarlanÄ±rken hata oluÅŸtu:', error);
    }
  } else {
    console.log("Bot polling modunda Ã§alÄ±ÅŸÄ±yor, webhook ayarlanmadÄ±.");
    
    // Durum kontrolÃ¼ iÃ§in endpoint
    if (app) {
      app.get('/api/bot/status', (req, res) => {
        res.json({
          status: 'online',
          mode: 'polling'
        });
      });
    }
  }
};

// Bot instance'Ä±nÄ± ve webhook ayarlama fonksiyonunu export et
module.exports = {
  bot,
  setupWebhook
}; 