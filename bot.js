require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');

// Bot token
const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) {
  throw new Error('TELEGRAM_BOT_TOKEN is not defined in environment variables');
}

// Bot oluÅŸturulmasÄ± - production'da webhook kullan, development'ta polling
const isDevelopment = !process.env.VERCEL_URL;
let bot;

// GÃ¼venli bot baÅŸlatma
try {
  bot = new TelegramBot(token, { polling: isDevelopment });
  console.log('Bot instance created successfully');
} catch (error) {
  console.error('Error creating bot instance:', error);
  // Fallback bot oluÅŸtur
  bot = new TelegramBot(token, { polling: false });
}

// Mock veri - Airdroplar ve borsalar
const airdropData = [
  { name: 'KSHA Token', description: 'Yeni kripto para airdrop fÄ±rsatÄ±', link: 'https://example.com/ksha-airdrop' },
  { name: 'BLUM Token', description: 'Blum ekosistem token airdrop', link: 'https://example.com/blum-airdrop' },
  { name: 'NFT Airdrop', description: 'Ã–zel koleksiyon NFT airdrop', link: 'https://example.com/nft-airdrop' }
];

const exchangeData = [
  { name: 'Binance', description: 'En bÃ¼yÃ¼k kripto para borsasÄ±', link: 'https://binance.com' },
  { name: 'KuCoin', description: 'PopÃ¼ler altcoin borsasÄ±', link: 'https://kucoin.com' },
  { name: 'Gate.io', description: 'Yeni projeler iÃ§in borsa', link: 'https://gate.io' }
];

// KarÅŸÄ±lama mesajÄ±
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  
  bot.sendMessage(chatId, `ðŸŽ‰ Kusha Kripto Bot'a HoÅŸgeldin !

âšª Botun Ã–zellikleri

ðŸŸ¡ Bot ile gÃ¼ncel kripto para Airdrop (Halka Arz) takip edebilirsin. Bu sayede gelir elde edebilirsin.
ðŸŸ¡ Ä°ndirimli komisyon avantajÄ± ve Ã¶dÃ¼llerle kripto para borsalarÄ±na kayÄ±t olabilirsin.

KolaylÄ±klar âœ¨`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'ðŸŸ¡ AirDrop (Kripto Halka Arz)', callback_data: 'airdrop' }],
        [{ text: 'ðŸŸ¡ Partner Borsalar KayÄ±t Linkleri', callback_data: 'partner_borsalar' }],
        [{ text: 'ðŸ”µ Kusha Airdrop KazanÃ§ KanalÄ±', url: 'https://t.me/kushaairdropkanal' }],
        [{ text: 'ðŸ”µ Kusha Airdrop Twitter', url: 'https://twitter.com/kushaairdrop' }],
        [{ text: 'ðŸŸ¢ BlumAutoClicker', callback_data: 'blum_auto_clicker' }],
        [{ text: 'âšª KushaAutoClicker', callback_data: 'kusha_auto_clicker' }],
        [{ text: 'âš« KOD AL', callback_data: 'kod_al' }]
      ]
    }
  });
});

// AirDrop menÃ¼sÃ¼
bot.onText(/ðŸŸ¡ AirDrop \(Kripto Halka Arz\)/, (msg) => {
  const chatId = msg.chat.id;
  
  let message = 'ðŸš€ *GÃ¼ncel Airdrop FÄ±rsatlarÄ±*\n\n';
  
  airdropData.forEach((airdrop, index) => {
    message += `*${index + 1}. ${airdrop.name}*\n`;
    message += `AÃ§Ä±klama: ${airdrop.description}\n`;
    message += `Link: ${airdrop.link}\n\n`;
  });
  
  bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
});

// Partner Borsalar menÃ¼sÃ¼
bot.onText(/ðŸŸ¡ Partner Borsalar KayÄ±t Linkleri/, (msg) => {
  const chatId = msg.chat.id;
  
  let message = 'ðŸ’¹ *Partner Kripto Para BorsalarÄ±*\n\n';
  
  exchangeData.forEach((exchange, index) => {
    message += `*${index + 1}. ${exchange.name}*\n`;
    message += `AÃ§Ä±klama: ${exchange.description}\n`;
    message += `KayÄ±t Link: ${exchange.link}\n\n`;
  });
  
  bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
});

// Kusha Airdrop KazanÃ§ KanalÄ±
bot.onText(/ðŸ”µ Kusha Airdrop KazanÃ§ KanalÄ±/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 'Airdrop kazanÃ§ kanalÄ±mÄ±za katÄ±lÄ±n: https://t.me/kushaairdropkanal');
});

// Kusha Airdrop Twitter
bot.onText(/ðŸ”µ Kusha Airdrop Twitter/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 'Twitter hesabÄ±mÄ±zÄ± takip edin: https://twitter.com/kushaairdrop');
});

// BlumAutoClicker
bot.onText(/ðŸŸ¢ BlumAutoClicker/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 'BlumAutoClicker uygulamasÄ± hakkÄ±nda bilgi: Kripto airdrop etkinliklerinde otomatik tÄ±klama iÃ§in tasarlanmÄ±ÅŸ yardÄ±mcÄ± araÃ§.');
});

// KushaAutoClicker
bot.onText(/âšª KushaAutoClicker/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 'KushaAutoClicker uygulamasÄ± hakkÄ±nda bilgi: Airdrop ve bounty gÃ¶revleri iÃ§in Ã¶zel olarak tasarlanmÄ±ÅŸ tÄ±klama aracÄ±.');
});

// KOD AL
bot.onText(/âš« KOD AL/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 'Referans kodunuz: KUSHA2024\nBu kodu borsalara kayÄ±t olurken kullanabilirsiniz.');
});

// Callback sorgularÄ± iÃ§in iÅŸleyici ekleme
bot.on('callback_query', (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  
  switch (data) {
    case 'airdrop':
      let airdropMessage = 'ðŸš€ *GÃ¼ncel Airdrop FÄ±rsatlarÄ±*\n\n';
  
      airdropData.forEach((airdrop, index) => {
        airdropMessage += `*${index + 1}. ${airdrop.name}*\n`;
        airdropMessage += `AÃ§Ä±klama: ${airdrop.description}\n`;
        airdropMessage += `Link: ${airdrop.link}\n\n`;
      });
  
      bot.sendMessage(chatId, airdropMessage, { parse_mode: 'Markdown' });
      break;
      
    case 'partner_borsalar':
      let exchangeMessage = 'ðŸ’¹ *Partner Kripto Para BorsalarÄ±*\n\n';
  
      exchangeData.forEach((exchange, index) => {
        exchangeMessage += `*${index + 1}. ${exchange.name}*\n`;
        exchangeMessage += `AÃ§Ä±klama: ${exchange.description}\n`;
        exchangeMessage += `KayÄ±t Link: ${exchange.link}\n\n`;
      });
  
      bot.sendMessage(chatId, exchangeMessage, { parse_mode: 'Markdown' });
      break;
      
    case 'blum_auto_clicker':
      bot.sendMessage(chatId, 'BlumAutoClicker uygulamasÄ± hakkÄ±nda bilgi: Kripto airdrop etkinliklerinde otomatik tÄ±klama iÃ§in tasarlanmÄ±ÅŸ yardÄ±mcÄ± araÃ§.');
      break;
      
    case 'kusha_auto_clicker':
      bot.sendMessage(chatId, 'KushaAutoClicker uygulamasÄ± hakkÄ±nda bilgi: Airdrop ve bounty gÃ¶revleri iÃ§in Ã¶zel olarak tasarlanmÄ±ÅŸ tÄ±klama aracÄ±.');
      break;
      
    case 'kod_al':
      bot.sendMessage(chatId, 'Referans kodunuz: KUSHA2024\nBu kodu borsalara kayÄ±t olurken kullanabilirsiniz.');
      break;
  }
  
  // Bildirim kapatma
  bot.answerCallbackQuery(callbackQuery.id);
});

// DiÄŸer mesajlara yanÄ±t (polling modundayken)
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  
  // Sadece /start dÄ±ÅŸÄ±ndaki mesajlarÄ± ve callback query olmayanlarÄ± yakala (polling iÃ§in)
  if (isDevelopment && !msg.text?.match(/^\/start/) && !msg.callback_query) {
    bot.sendMessage(chatId, 'AnlaÅŸÄ±lmadÄ±. LÃ¼tfen menÃ¼den bir seÃ§enek seÃ§in veya /start yazarak baÅŸlangÄ±Ã§ menÃ¼sÃ¼ne dÃ¶nÃ¼n.');
  }
});

// Webhook'u ayarlama fonksiyonu
const setupWebhook = (app) => {
  if (!isDevelopment) {
    try {
      // Vercel URL kontrolÃ¼
      if (!process.env.VERCEL_URL) {
        console.error('VERCEL_URL Ã§evre deÄŸiÅŸkeni tanÄ±mlanmamÄ±ÅŸ!');
        console.log('Webhook ayarlanamadÄ±. LÃ¼tfen Vercel proje ayarlarÄ±nda VERCEL_URL Ã§evre deÄŸiÅŸkenini tanÄ±mlayÄ±n.');
        return;
      }
      
      const url = `https://${process.env.VERCEL_URL}`;
      const webhookPath = `/api/webhook/${token}`;
      const fullWebhookUrl = `${url}${webhookPath}`;
      
      console.log(`Webhook URL'si ayarlanÄ±yor: ${fullWebhookUrl}`);
      
      bot.setWebHook(fullWebhookUrl)
        .then(() => {
          console.log(`Webhook baÅŸarÄ±yla ayarlandÄ±: ${fullWebhookUrl}`);
        })
        .catch(error => {
          console.error('Webhook ayarlanÄ±rken hata oluÅŸtu:', error);
        });
      
      // Gelen webhook isteklerini iÅŸle
      app.post(webhookPath, (req, res) => {
        console.log('Webhook isteÄŸi alÄ±ndÄ±');
        
        try {
          // Telegram API'den gelen update verisinin yapÄ±sÄ±nÄ± kontrol et
          const update = req.body;
          
          if (!update) {
            console.error('BoÅŸ update alÄ±ndÄ±');
            return res.sendStatus(200); // Telegram expects 200 OK even for errors
          }
          
          console.log('Update verisi:', JSON.stringify(update).slice(0, 200) + '...');
          
          // MesajÄ± doÄŸrudan iÅŸle - bu yaklaÅŸÄ±m daha gÃ¼venilir
          bot.processUpdate(update);
          
          console.log('Webhook isteÄŸi baÅŸarÄ±yla iÅŸlendi');
          return res.sendStatus(200);
        } catch (error) {
          console.error('Webhook isteÄŸi iÅŸlenirken hata oluÅŸtu:', error);
          return res.sendStatus(200); // Telegram expects 200 OK even for errors
        }
      });

      // Webhook bilgilerini kontrol etme endpoint'i
      app.get('/api/webhook/status', (req, res) => {
        bot.getWebHookInfo()
          .then(info => {
            res.json({ status: 'success', webhookInfo: info });
          })
          .catch(error => {
            res.json({ status: 'error', error: error.message });
          });
      });
    } catch (error) {
      console.error('Webhook ayarlanÄ±rken hata oluÅŸtu:', error);
    }
  } else {
    console.log("Bot polling modunda Ã§alÄ±ÅŸÄ±yor.");
    
    // Hata ayÄ±klama iÃ§in fazladan log ekle
    bot.on('polling_error', (error) => {
      console.error('Polling hatasÄ±:', error);
    });
  }
};

// Bot instance'Ä±nÄ± ve webhook ayarlama fonksiyonunu export et
module.exports = {
  bot,
  setupWebhook
}; 